#!/usr/bin/env bash

set -o nounset
set -o errexit

trap 'echo "Aborting due to errexit on line $LINENO. Exit code: $?" >&2' ERR

set -o errtrace
set -o pipefail

IFS=$'\n\t'

###############################################################################
# Environment
###############################################################################

_ME=$(basename "${0}")

###############################################################################
# Debug
###############################################################################

__DEBUG_COUNTER=0
_debug() {
  if [[ "${_USE_DEBUG:-"0"}" -eq 1 ]]
  then
    __DEBUG_COUNTER=$((__DEBUG_COUNTER+1))
    printf "🐛  %s " "${__DEBUG_COUNTER}"
    "${@}"
    printf "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\\n"
  fi
}

debug() {
  _debug echo "${@}"
}

###############################################################################
# Die
###############################################################################

_die() {
  printf "❌  "
  "${@}" 1>&2
  exit 1
}

die() {
  _die echo "${@}"
}

###############################################################################
# Help
###############################################################################

_print_help() {
  cat <<HEREDOC
Build image
Script for building Trove guest images using OpenStack Disk Image Builder

Usage:
  ${_ME} [--options] [<arguments>]
  ${_ME} -h | --help

Options:
  -h --help  Display this help information.
HEREDOC
}

###############################################################################
# Options
###############################################################################

# Normalize Options ###########################################################

optstring=xo:h


while ((${#}))
do
  case ${1} in
    -[!-]?*)
      for ((i=1; i<${#1}; i++))
      do
        c=${1:i:1}
        options+=("-${c}")

        if [[ ${optstring} = *"${c}:"* && ${1:i+1} ]]
        then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;
    --?*=*)
      options+=("${1%%=*}" "${1#*=}")
      ;;
    --)
      options+=(--endopts)
      shift
      options+=("${@}")
      break
      ;;
    *)
      options+=("${1}")
      ;;
  esac

  shift
done

set -- "${options[@]:-}"
unset options

# Parse Options ###############################################################

# Initialize program option variables.
_PRINT_HELP=0
_USE_DEBUG=0

# Initialize additional expected option variables.

_require_argument() {
  local _option="${1:-}"
  local _argument="${2:-}"

  if [[ -z "${_argument}" ]] || [[ "${_argument}" =~ ^- ]]
  then
    _die printf "Option requires an argument: %s\\n" "${_option}"
  fi
}


while [ ${#} -gt 0 ]
do
  __option="${1:-}"
  __maybe_param="${2:-}"
  case "${__option}" in
    -h|--help)
      _PRINT_HELP=1
      ;;
    --debug)
      _USE_DEBUG=1
      ;;
    --datastore)
      _require_argument "${__option}" "${__maybe_param}"
      SERVICE_TYPE="${__maybe_param}"
      shift
      ;;
    --distro)
      _require_argument "${__option}" "${__maybe_param}"
      DISTRO="${__maybe_param}"
      shift
      ;;
    --distro-release)
      _require_argument "${__option}" "${__maybe_param}"
      DISTRO_RELEASE="${__maybe_param}"
      shift
      ;;
    --controller-ip)
      _require_argument "${__option}" "${__maybe_param}"
      CONTROLLER_IP="${__maybe_param}"
      shift
      ;;
    --output)
      _require_argument "${__option}" "${__maybe_param}"
      IMAGE_OUTPUT_DIR="${__maybe_param}"
      shift
      ;;
    --endopts)
      break
      ;;
    -*)
      _die printf "Unexpected option: %s\\n" "${__option}"
      ;;
  esac
  shift
done

###############################################################################
# Program Functions
###############################################################################

_build_image() {
  local primary_ip=$(ip route get 8.8.8.8 | head -1 | cut -d' ' -f7)

  export HOST_USERNAME=${HOST_USERNAME:-'root'}
  export HOST_SCP_USERNAME=${HOST_SCP_USERNAME:-'root'}
  export GUEST_USERNAME=${GUEST_USERNAME:-'trove'}
  export CONTROLLER_IP=${CONTROLLER_IP:-$primary_ip}
  export TROVESTACK_SCRIPTS=${TROVESTACK_SCRIPTS:-'/opt/stack/trove/integration/scripts'}
  export SERVICE_TYPE=${SERVICE_TYPE:-'mariadb'}
  export PATH_TROVE=${PATH_TROVE:-'/opt/stack/trove'}
  export ESCAPED_PATH_TROVE=$(echo $PATH_TROVE | sed 's/\//\\\//g')
  export SSH_DIR=${SSH_DIR:-'/root/.ssh'}
  export GUEST_LOGDIR=${GUEST_LOGDIR:-'/var/log/trove/'}
  export ESCAPED_GUEST_LOGDIR=$(echo $GUEST_LOGDIR | sed 's/\//\\\//g')
  export DIB_CLOUD_INIT_DATASOURCES="ConfigDrive"
  export DISTRO=${DISTRO:-'ubuntu'}
  export DISTRO_RELEASE=${DISTRO_RELEASE:-'xenial'}
  export IMAGE_OUTPUT_DIR=${IMAGE_OUTPUT_DIR:-'/opt/stack/images/${DISTRO}_${SERVICE_TYPE}/${DISTRO}_${SERVICE_TYPE}'}

  PATH_DISKIMAGEBUILDER=${PATH_DISKIMAGEBUILDER:-'/opt/stack/diskimage-builder'}
  PATH_TRIPLEO_ELEMENTS=${PATH_TRIPLEO_ELEMENTS:-'/opt/stack/tripleo-image-elements'}

  export ELEMENTS_PATH=$TROVESTACK_SCRIPTS/files/elements
  export ELEMENTS_PATH+=:$PATH_DISKIMAGEBUILDER/elements
  export ELEMENTS_PATH+=:$PATH_TRIPLEO_ELEMENTS/elements
  export EXTRA_ELEMENTS=${EXTRA_ELEMENTS:-''}
  export DIB_CLOUD_INIT_ETC_HOSTS=true
  export QEMU_IMG_OPTIONS="--qemu-img-options compat=1.1"

  echo "============================================="
  echo "BUILD PARAMS"
  echo "============================================="
  echo "HOST_USERNAME=${HOST_USERNAME}"
  echo "HOST_SCP_USERNAME=${HOST_SCP_USERNAME}"
  echo "GUEST_USERNAME=${GUEST_USERNAME}"
  echo "CONTROLLER_IP=${CONTROLLER_IP}"
  echo "TROVESTACK_SCRIPTS=${TROVESTACK_SCRIPTS}"
  echo "SERVICE_TYPE=${SERVICE_TYPE}"
  echo "PATH_TROVE=${PATH_TROVE}"
  echo "ESCAPED_PATH_TROVE=${ESCAPED_PATH_TROVE}"
  echo "SSH_DIR=${SSH_DIR}"
  echo "GUEST_LOGDIR=${GUEST_LOGDIR}"
  echo "ESCAPED_GUEST_LOGDIR=${ESCAPED_GUEST_LOGDIR}"
  echo "DIB_CLOUD_INIT_DATASOURCES=${DIB_CLOUD_INIT_DATASOURCES}"
  echo "DISTRO=${DISTRO}"
  echo "DISTRO_RELEASE=${DISTRO_RELEASE}"
  echo "IMAGE_OUTPUT_DIR=${IMAGE_OUTPUT_DIR}"
  echo "DIB_CLOUD_INIT_ETC_HOSTS=${DIB_CLOUD_INIT_ETC_HOSTS}"
  echo "QEMU_IMG_OPTIONS=${QEMU_IMG_OPTIONS}"
  echo "ELEMENTS_PATH=${ELEMENTS_PATH}"
  echo "EXTRA_ELEMENTS=${EXTRA_ELEMENTS}"
  echo "============================================="

  read -p "Ready to build? " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    disk-image-create \
      -a amd64 \
      -o "${IMAGE_OUTPUT_DIR}" \
      -x ${QEMU_IMG_OPTIONS} \
      ${DISTRO}-${DISTRO_RELEASE} ${EXTRA_ELEMENTS} vm \
      cloud-init-datasources \
      ${DISTRO}-${DISTRO_RELEASE}-guest \
      ${DISTRO}-${DISTRO_RELEASE}-${SERVICE_TYPE}
  fi
}


###############################################################################
# Main
###############################################################################

_main() {
  if ((_PRINT_HELP))
  then
    _print_help
  else
    _build_image "$@"
  fi
}

_main "$@"
